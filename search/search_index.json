{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cloud Services This page serves as a collection of free cloud services you can sign up for and use on editors within OYOclass. To get started, click on any of the services offered on the left.","title":"Home"},{"location":"#cloud-services","text":"This page serves as a collection of free cloud services you can sign up for and use on editors within OYOclass. To get started, click on any of the services offered on the left.","title":"Cloud Services"},{"location":"datastores/backblaze/","text":"Backblaze Backblaze is a cloud storage service. While Backblaze offers its own client and interface to its storage buckets, it is S3 compatible which means you can use it with existing S3 libraries like boto3 . This is a step-by-step guide on setting up your own free Backblaze account and setting it up to work with OYOclass' Python3 Editor . Creating an Account First, visit Backblaze's Account Creation Page and enter the email you want to use and a password: After you successfully create an account, a window will pop up asking you if you want to read several guides. You can just click the Skip Quick Start button: Creating a Bucket To store data in an S3 service, we first need to make a bucket . Buckets are where files are stored in an S3 datatore. To create one with Backblaze, click on the Create a Bucket button: A new window will pop up where you will be required to name your bucket and choose some settings on it. Take note of the following restrictions: Bucket names are globally unique, so you may not be able to name your bucket exactly what you want to Having files in your bucket be private requires you to verify your email first After you choose your settings, click the Create a Bucket button at the bottom of the window: Finding Your Bucket's Endpoint URL To use an S3 access like boto3 requires you provide an endpoint URL to where the bucket exists. Once you create your bucket, you can see your bucket's endpoint URL in your bucket's info: Managing Application Keys Now that you have a bucket, we need to get access keys to authorize ourselves to access our bucket remotely. We can generate them easily by selecting App Keys on the left side of the page: Then, click on Add a New Application Key : Note Backblaze offers a global access key, but their global key does not work with s3 clients like boto3 . To support s3 clients, we must create a separate access key with this method. A window will pop up asking you for various options. Just set the name of your key and click on Create New Key : Finally, a box will show that has your keyID and applicationKey . This window will only ever show once, so if you lose your applicationKey, you will need to generate a new one. Be sure not to share these keys with anyone : Congratulations! You have successfully set up your Backblaze bucket to work properly via remote connection. For a guide on how to get started using your bucket, check out the Python3 Editor Docs .","title":"Backblaze S3"},{"location":"datastores/backblaze/#backblaze","text":"Backblaze is a cloud storage service. While Backblaze offers its own client and interface to its storage buckets, it is S3 compatible which means you can use it with existing S3 libraries like boto3 . This is a step-by-step guide on setting up your own free Backblaze account and setting it up to work with OYOclass' Python3 Editor .","title":"Backblaze"},{"location":"datastores/backblaze/#creating-an-account","text":"First, visit Backblaze's Account Creation Page and enter the email you want to use and a password: After you successfully create an account, a window will pop up asking you if you want to read several guides. You can just click the Skip Quick Start button:","title":"Creating an Account"},{"location":"datastores/backblaze/#creating-a-bucket","text":"To store data in an S3 service, we first need to make a bucket . Buckets are where files are stored in an S3 datatore. To create one with Backblaze, click on the Create a Bucket button: A new window will pop up where you will be required to name your bucket and choose some settings on it. Take note of the following restrictions: Bucket names are globally unique, so you may not be able to name your bucket exactly what you want to Having files in your bucket be private requires you to verify your email first After you choose your settings, click the Create a Bucket button at the bottom of the window:","title":"Creating a Bucket"},{"location":"datastores/backblaze/#finding-your-buckets-endpoint-url","text":"To use an S3 access like boto3 requires you provide an endpoint URL to where the bucket exists. Once you create your bucket, you can see your bucket's endpoint URL in your bucket's info:","title":"Finding Your Bucket's Endpoint URL"},{"location":"datastores/backblaze/#managing-application-keys","text":"Now that you have a bucket, we need to get access keys to authorize ourselves to access our bucket remotely. We can generate them easily by selecting App Keys on the left side of the page: Then, click on Add a New Application Key : Note Backblaze offers a global access key, but their global key does not work with s3 clients like boto3 . To support s3 clients, we must create a separate access key with this method. A window will pop up asking you for various options. Just set the name of your key and click on Create New Key : Finally, a box will show that has your keyID and applicationKey . This window will only ever show once, so if you lose your applicationKey, you will need to generate a new one. Be sure not to share these keys with anyone : Congratulations! You have successfully set up your Backblaze bucket to work properly via remote connection. For a guide on how to get started using your bucket, check out the Python3 Editor Docs .","title":"Managing Application Keys"},{"location":"datastores/firebase/","text":"Firebase Firebase is a cloud development platform offered by Google. Firebase is a large and expansive service that can do many things, but one of the modules offered is a realtime database that can be accessed remotely. This is a step-by-step guide on setting up your own free Firebase realtime database instance. Creating an Account Note If you already have a Google account, then you can skip to the Creating a Project section. You will need a working phone number to recieve a confirmation text to create a Google account. To use Firebase, you must have a Google account. So the first thing we need to do is create one. Click on the Get started button and you will be brought to the Google sign in page: Then, click on the Create Account button: In the menu that appears, click For My Personal Use : Fill out this info, then click Next : Enter your phone number, then click Next : After you verify your phone number, you will be asked for your birthdate. After you enter it and agree to Google's terms of service, you now have a fully functioning Google account, and can create a Firebase project! Creating a Project Before we create a database, we need to create a project for it to be associated with. Click on Create a project : Then in the next page, decide on a name and click Continue : Creating a Realtime Database Now that we have a project, we need to add a realtime database to it. In your web browser, on the left side of your screen, find the Build section and click on Realtime Database : On the next page, click on Create Database : In the window that pops up, we won't need to change anything. Click on Next : Then click on Enable : Congratulations! Your database is now set up and ready to use! You will need to download the credentials JSON for your project to connect to it from your programs. You can read about how to get your Firebase realtime database working with Python3 Editor in the Python3 Editor Docs","title":"Firebase"},{"location":"datastores/firebase/#firebase","text":"Firebase is a cloud development platform offered by Google. Firebase is a large and expansive service that can do many things, but one of the modules offered is a realtime database that can be accessed remotely. This is a step-by-step guide on setting up your own free Firebase realtime database instance.","title":"Firebase"},{"location":"datastores/firebase/#creating-an-account","text":"Note If you already have a Google account, then you can skip to the Creating a Project section. You will need a working phone number to recieve a confirmation text to create a Google account. To use Firebase, you must have a Google account. So the first thing we need to do is create one. Click on the Get started button and you will be brought to the Google sign in page: Then, click on the Create Account button: In the menu that appears, click For My Personal Use : Fill out this info, then click Next : Enter your phone number, then click Next : After you verify your phone number, you will be asked for your birthdate. After you enter it and agree to Google's terms of service, you now have a fully functioning Google account, and can create a Firebase project!","title":"Creating an Account"},{"location":"datastores/firebase/#creating-a-project","text":"Before we create a database, we need to create a project for it to be associated with. Click on Create a project : Then in the next page, decide on a name and click Continue :","title":"Creating a Project"},{"location":"datastores/firebase/#creating-a-realtime-database","text":"Now that we have a project, we need to add a realtime database to it. In your web browser, on the left side of your screen, find the Build section and click on Realtime Database : On the next page, click on Create Database : In the window that pops up, we won't need to change anything. Click on Next : Then click on Enable : Congratulations! Your database is now set up and ready to use! You will need to download the credentials JSON for your project to connect to it from your programs. You can read about how to get your Firebase realtime database working with Python3 Editor in the Python3 Editor Docs","title":"Creating a Realtime Database"},{"location":"datastores/mongo/","text":"MongoDB MongoDB is a popular NoSQL database that can be run on the cloud. MongoDB offers a fully free basic cloud database that you can use how you wish, and works with OYOclass' Python3 Editor . This is a step-by-step guide on setting up your own free cloud Mongo instance. Creating an Account First, go to Mongo's Free Cloud Database page, and click on the Try Free Now button: You will then be taken to a small signup form. You can leave the Company field blank, but you need to fill in your First Name , Last Name , Email , and Password . Agree to the Terms of Service and finish creating your account: You will be required to confirm your email address. Open up your email account and click on the Verify Email button when you receieve the email: Creating Your Database Once you create an account with the link above, we need to actually create a database. To do this, we can select the following options during account creation: Then when asked which database type we want, we will choose M0 because it is free: Now, the last step of the basic setup is to create a user in the database . This is different from your Mongo account, this is an account you define inside your own database. Choose any username and password you want, but don't forget it . We will need the username and password later to connect to the database: Setting Up Your Database to Work With Python3 Editor Now that we have a fully running Mongo cloud database, we need to make it so Python3 Editor is allowed to connect to it. To do this, we need to do one more thing: Click on Network Access on the left side of your screen in MongoDB Cloud, then click on Add IP Address : In the window that pops up, click on ALLOW ACCESS FROM ANYWHERE then click Confirm : Congratulations! You have successfully set up your Mongo cloud instance to work properly via remote connection. For a guide on how to get started using your database, check out the Python3 Editor Docs .","title":"MongoDB Atlas"},{"location":"datastores/mongo/#mongodb","text":"MongoDB is a popular NoSQL database that can be run on the cloud. MongoDB offers a fully free basic cloud database that you can use how you wish, and works with OYOclass' Python3 Editor . This is a step-by-step guide on setting up your own free cloud Mongo instance.","title":"MongoDB"},{"location":"datastores/mongo/#creating-an-account","text":"First, go to Mongo's Free Cloud Database page, and click on the Try Free Now button: You will then be taken to a small signup form. You can leave the Company field blank, but you need to fill in your First Name , Last Name , Email , and Password . Agree to the Terms of Service and finish creating your account: You will be required to confirm your email address. Open up your email account and click on the Verify Email button when you receieve the email:","title":"Creating an Account"},{"location":"datastores/mongo/#creating-your-database","text":"Once you create an account with the link above, we need to actually create a database. To do this, we can select the following options during account creation: Then when asked which database type we want, we will choose M0 because it is free: Now, the last step of the basic setup is to create a user in the database . This is different from your Mongo account, this is an account you define inside your own database. Choose any username and password you want, but don't forget it . We will need the username and password later to connect to the database:","title":"Creating Your Database"},{"location":"datastores/mongo/#setting-up-your-database-to-work-with-python3-editor","text":"Now that we have a fully running Mongo cloud database, we need to make it so Python3 Editor is allowed to connect to it. To do this, we need to do one more thing: Click on Network Access on the left side of your screen in MongoDB Cloud, then click on Add IP Address : In the window that pops up, click on ALLOW ACCESS FROM ANYWHERE then click Confirm : Congratulations! You have successfully set up your Mongo cloud instance to work properly via remote connection. For a guide on how to get started using your database, check out the Python3 Editor Docs .","title":"Setting Up Your Database to Work With Python3 Editor"},{"location":"datastores/redis/","text":"Redis Redis is an in-memory datastore which boasts high speed data storage and access. Redis is most often used for caching frequently used data that doesn't need to be stored forever, such as client sessions for a web service. Redis offers a free version of their enterprise cloud for personal use. This is a step-by-step guide on setting up an account with Redis. Creating an Account First, visit Redis' Try Free Page and either fill out the form or login with a Google/GitHub account: Depending on your sign-up method, an email confirmation may be sent. Confirm your email address then proceed to the next step. Creating a Database You will automatically be brought to the page to create your database. You can simply leave the settings in their defaults and just click the Let's start free button: You should immediately see your database being set up. After a couple of minutes, your database will be fully ready to be used: Congratulations! You have successfully set up your Redis cloud instance to work properly via remote connection. For a guide on how to get started using your database, check out the Python3 Editor Redis Docs .","title":"Redis"},{"location":"datastores/redis/#redis","text":"Redis is an in-memory datastore which boasts high speed data storage and access. Redis is most often used for caching frequently used data that doesn't need to be stored forever, such as client sessions for a web service. Redis offers a free version of their enterprise cloud for personal use. This is a step-by-step guide on setting up an account with Redis.","title":"Redis"},{"location":"datastores/redis/#creating-an-account","text":"First, visit Redis' Try Free Page and either fill out the form or login with a Google/GitHub account: Depending on your sign-up method, an email confirmation may be sent. Confirm your email address then proceed to the next step.","title":"Creating an Account"},{"location":"datastores/redis/#creating-a-database","text":"You will automatically be brought to the page to create your database. You can simply leave the settings in their defaults and just click the Let's start free button: You should immediately see your database being set up. After a couple of minutes, your database will be fully ready to be used: Congratulations! You have successfully set up your Redis cloud instance to work properly via remote connection. For a guide on how to get started using your database, check out the Python3 Editor Redis Docs .","title":"Creating a Database"}]}